// -*- c -*-
//
// %CopyrightBegin%
//
// Copyright Ericsson AB 2020. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// %CopyrightEnd%
//

NewBeamOp(stp, op) {
    NEW_GENOP($stp, $op);
    $op->next = NULL;
}

BeamOpNameArity(op, name, arity) {
    GENOP_NAME_ARITY($op, $name, $arity);
}

BeamOpArity(op, arity) {
    GENOP_ARITY($op, $arity);
}

NativeEndian(flags) {
#if defined(WORDS_BIGENDIAN)
    if (($flags).val & BSF_NATIVE) {
        ($flags).val &= ~(BSF_LITTLE|BSF_NATIVE);
    }
#else
  if (($flags).val & BSF_NATIVE) {
      ($flags).val &= ~BSF_NATIVE;
      ($flags).val |= BSF_LITTLE;
  }
#endif
}

gen.element(Fail, Index, Tuple, Dst) {
    GenOp* op;

    $NewBeamOp(S, op);

    if (Index.type == TAG_i && Index.val > 0 &&
        Index.val <= ERTS_MAX_TUPLE_SIZE &&
        (Tuple.type == TAG_x || Tuple.type == TAG_y)) {
        $BeamOpNameArity(op, i_fast_element, 4);
        op->a[0] = Tuple;
        op->a[1] = Fail;
        op->a[2].type = TAG_u;
        op->a[2].val = Index.val;
        op->a[3] = Dst;
    } else {
        $BeamOpNameArity(op, i_element, 4);
        op->a[0] = Tuple;
        op->a[1] = Fail;
        op->a[2] = Index;
        op->a[3] = Dst;
    }

    return op;
}

gen_bs_save_restore(reg, index, instr) {
    GenOp* op;

    $NewBeamOp(S, op);
    $BeamOpNameArity(op, $instr, 2);
    op->a[0] = $reg;
    op->a[1] = $index;
    if (Index.type == TAG_u) {
        op->a[1].val = $index.val+1;
    } else if ($index.type == TAG_a && $index.val == am_start) {
        op->a[1].type = TAG_u;
        op->a[1].val = 0;
    }
    return op;
}

gen.bs_save(Reg, Index) {
    $gen_bs_save_restore(Reg, Index, i_bs_save2);
}

gen.bs_restore(Reg, Index) {
    $gen_bs_save_restore(Reg, Index, i_bs_restore2);
}

// Generate the fastest instruction to fetch an integer from a binary.
gen.get_integer2(Fail, Ms, Live, Size, Unit, Flags, Dst) {
    GenOp* op;
    UWord bits;

    $NewBeamOp(S, op);
    $NativeEndian(Flags);
    if (Size.type == TAG_i) {
        if (!beam_load_safe_mul(Size.val, Unit.val, &bits)) {
            goto error;
        } else if ((Flags.val & BSF_SIGNED) != 0) {
            goto generic;
        } else if (bits == 8) {
            $BeamOpNameArity(op, i_bs_get_integer_8, 3);
            op->a[0] = Ms;
            op->a[1] = Fail;
            op->a[2] = Dst;
        } else if (bits == 16 && (Flags.val & BSF_LITTLE) == 0) {
            $BeamOpNameArity(op, i_bs_get_integer_16, 3);
            op->a[0] = Ms;
            op->a[1] = Fail;
            op->a[2] = Dst;
#ifdef ARCH_64
        } else if (bits == 32 && (Flags.val & BSF_LITTLE) == 0) {
            $BeamOpNameArity(op, i_bs_get_integer_32, 3);
            op->a[0] = Ms;
            op->a[1] = Fail;
            op->a[2] = Dst;
#endif
        } else {
        generic:
            if (bits < SMALL_BITS) {
                $BeamOpNameArity(op, i_bs_get_integer_small_imm, 5);
                op->a[0] = Ms;
                op->a[1].type = TAG_u;
                op->a[1].val = bits;
                op->a[2] = Fail;
                op->a[3] = Flags;
                op->a[4] = Dst;
            } else {
                $BeamOpNameArity(op, i_bs_get_integer_imm, 6);
                op->a[0] = Ms;
                op->a[1].type = TAG_u;
                op->a[1].val = bits;
                op->a[2] = Live;
                op->a[3] = Fail;
                op->a[4] = Flags;
                op->a[5] = Dst;
            }
        }
    } else if (Size.type == TAG_q) {
        Eterm big = S->literals[Size.val].term;
        Uint bigval;

        if (!term_to_Uint(big, &bigval)) {
        error:
            $BeamOpNameArity(op, jump, 1);
            op->a[0] = Fail;
        } else {
            if (!beam_load_safe_mul(bigval, Unit.val, &bits)) {
                goto error;
            }
            goto generic;
        }
    } else if (Size.type == TAG_x || Size.type == TAG_y) {
        $BeamOpNameArity(op, i_bs_get_integer, 6);
        op->a[0] = Ms;
        op->a[1] = Fail;
        op->a[2] = Live;
        op->a[3].type = TAG_u;
        op->a[3].val = (Unit.val << 3) | Flags.val;
        op->a[4] = Size;
        op->a[5] = Dst;
        return op;
    } else {
        /* Invalid literal size. */
        goto error;
    }
    return op;
}

// Generate the fastest instruction to fetch a binary from a binary.
gen.get_binary2(Fail, Ms, Live, Size, Unit, Flags, Dst) {
    GenOp* op;
    $NewBeamOp(S, op);

    $NativeEndian(Flags);
    if (Size.type == TAG_a && Size.val == am_all) {
        $BeamOpNameArity(op, i_bs_get_binary_all2, 5);
        op->a[0] = Ms;
        op->a[1] = Fail;
        op->a[2] = Live;
        op->a[3] = Unit;
        op->a[4] = Dst;
    } else if (Size.type == TAG_i) {
        $BeamOpNameArity(op, i_bs_get_binary_imm2, 6);
        op->a[0] = Ms;
        op->a[1] = Fail;
        op->a[2] = Live;
        op->a[3].type = TAG_u;
        if (!beam_load_safe_mul(Size.val, Unit.val, &op->a[3].val)) {
            goto error;
        }
        op->a[4] = Flags;
        op->a[5] = Dst;
    } else if (Size.type == TAG_q) {
        Eterm big = S->literals[Size.val].term;
        Uint bigval;

        if (!term_to_Uint(big, &bigval)) {
        error:
            $BeamOpNameArity(op, jump, 1);
            op->a[0] = Fail;
        } else {
            $BeamOpNameArity(op, i_bs_get_binary_imm2, 6);
            op->a[0] = Ms;
            op->a[1] = Fail;
            op->a[2] = Live;
            op->a[3].type = TAG_u;
            if (!beam_load_safe_mul(bigval, Unit.val, &op->a[3].val)) {
                goto error;
            }
            op->a[4] = Flags;
            op->a[5] = Dst;
        }
    } else if (Size.type == TAG_x || Size.type == TAG_y) {
        $BeamOpNameArity(op, i_bs_get_binary2, 6);
        op->a[0] = Ms;
        op->a[1] = Fail;
        op->a[2] = Live;
        op->a[3] = Size;
        op->a[4].type = TAG_u;
        op->a[4].val = (Unit.val << 3) | Flags.val;
        op->a[5] = Dst;
    } else {
        /* Invalid literal size. */
        goto error;
    }
    return op;
}

// Generate an instruction to fetch a float from a binary.
gen.get_float2(Fail, Ms, Live, Size, Unit, Flags, Dst) {
    GenOp* op;
    $NewBeamOp(S, op);

    $NativeEndian(Flags);
    $BeamOpNameArity(op, i_bs_get_float2, 6);
    op->a[0] = Ms;
    op->a[1] = Fail;
    op->a[2] = Live;
    op->a[3] = Size;
    op->a[4].type = TAG_u;
    op->a[4].val = (Unit.val << 3) | Flags.val;
    op->a[5] = Dst;
    return op;
}

gen.put_binary(Fail, Size, Unit, Flags, Src) {
    GenOp* op;
    $NewBeamOp(S, op);

    $NativeEndian(Flags);
    if (Size.type == TAG_a && Size.val == am_all) {
        $BeamOpNameArity(op, i_new_bs_put_binary_all, 3);
        op->a[0] = Src;
        op->a[1] = Fail;
        op->a[2] = Unit;
    } else if (Size.type == TAG_i) {
        $BeamOpNameArity(op, i_new_bs_put_binary_imm, 3);
        op->a[0] = Fail;
        op->a[1].type = TAG_u;
        if (beam_load_safe_mul(Size.val, Unit.val, &op->a[1].val)) {
            op->a[2] = Src;
        } else {
        error:
            $BeamOpNameArity(op, badarg, 1);
            op->a[0] = Fail;
        }
    } else if (Size.type == TAG_q) {
#ifdef ARCH_64
        /*
         * There is no way that this binary would fit in memory.
         */
        goto error;
#else
        Eterm big = S->literals[Size.val].term;
        Uint bigval;
        Uint size;

        if (!term_to_Uint(big, &bigval) ||
            !beam_load_safe_mul(bigval, Unit.val, &size)) {
            goto error;
        }
        $BeamOpNameArity(op, i_new_bs_put_binary_imm, 3);
        op->a[0] = Fail;
        op->a[1].type = TAG_u;
        op->a[1].val = size;
        op->a[2] = Src;
#endif
    } else {
        $BeamOpNameArity(op, i_new_bs_put_binary, 4);
        op->a[0] = Fail;
        op->a[1] = Size;
        op->a[2].type = TAG_u;
        op->a[2].val = (Unit.val << 3) | (Flags.val & 7);
        op->a[3] = Src;
    }

    return op;
}

gen.put_integer(Fail, Size, Unit, Flags, Src) {
    GenOp* op;
    $NewBeamOp(S, op);

    $NativeEndian(Flags);
    /* Negative size must fail */
    if (Size.type == TAG_i) {
        Uint size;
        if (!beam_load_safe_mul(Size.val, Unit.val, &size)) {
        error:
            $BeamOpNameArity(op, badarg, 1);
            op->a[0] = Fail;
            return op;
        }
        $BeamOpNameArity(op, i_new_bs_put_integer_imm, 4);
        op->a[0] = Src;
        op->a[1] = Fail;
        op->a[2].type = TAG_u;
        op->a[2].val = size;
        op->a[3].type = Flags.type;
        op->a[3].val = (Flags.val & 7);
    } else if (Size.type == TAG_q) {
        Eterm big = S->literals[Size.val].term;
        Uint bigval;
        Uint size;

        if (!term_to_Uint(big, &bigval) ||
            !beam_load_safe_mul(bigval, Unit.val, &size)) {
            goto error;
        }
        $BeamOpNameArity(op, i_new_bs_put_integer_imm, 4);
        op->a[0] = Src;
        op->a[1] = Fail;
        op->a[2].type = TAG_u;
        op->a[2].val = size;
        op->a[3].type = Flags.type;
        op->a[3].val = (Flags.val & 7);
    } else {
        $BeamOpNameArity(op, i_new_bs_put_integer, 4);
        op->a[0] = Fail;
        op->a[1] = Size;
        op->a[2].type = TAG_u;
        op->a[2].val = (Unit.val << 3) | (Flags.val & 7);
        op->a[3] = Src;
    }
    return op;
}

gen.put_float(Fail, Size, Unit, Flags, Src) {
    GenOp* op;
    $NewBeamOp(S, op);

    $NativeEndian(Flags);
    if (Size.type == TAG_i) {
        $BeamOpNameArity(op, i_new_bs_put_float_imm, 4);
        op->a[0] = Fail;
        op->a[1].type = TAG_u;
        if (!beam_load_safe_mul(Size.val, Unit.val, &op->a[1].val)) {
            $BeamOpNameArity(op, badarg, 1);
            op->a[0] = Fail;
        } else {
            op->a[2] = Flags;
            op->a[3] = Src;
        }
    } else {
        $BeamOpNameArity(op, i_new_bs_put_float, 4);
        op->a[0] = Fail;
        op->a[1] = Size;
        op->a[2].type = TAG_u;
        op->a[2].val = (Unit.val << 3) | (Flags.val & 7);
        op->a[3] = Src;
    }
    return op;
}

// Generate the fastest instruction for bs_skip_bits.
gen.skip_bits2(Fail, Ms, Size, Unit, Flags) {
    GenOp* op;
    $NewBeamOp(S, op);

    $NativeEndian(Flags);
    if (Size.type == TAG_a && Size.val == am_all) {
        /*
         * This kind of skip instruction will only be found in modules
         * compiled before OTP 19. From OTP 19, the compiler generates
         * a test_unit instruction of a bs_skip at the end of a
         * binary.
         *
         * It is safe to replace the skip instruction with a test_unit
         * instruction, because the position will never be used again.
         * If the match context itself is used again, it will be used by
         * a bs_restore2 instruction which will overwrite the position
         * by one of the stored positions.
         */
        $BeamOpNameArity(op, bs_test_unit, 3);
        op->a[0] = Fail;
        op->a[1] = Ms;
        op->a[2] = Unit;
    } else if (Size.type == TAG_i) {
        $BeamOpNameArity(op, i_bs_skip_bits_imm2, 3);
        op->a[0] = Fail;
        op->a[1] = Ms;
        op->a[2].type = TAG_u;
        if (!beam_load_safe_mul(Size.val, Unit.val, &op->a[2].val)) {
            goto error;
        }
    } else if (Size.type == TAG_q) {
        Eterm big = S->literals[Size.val].term;
        Uint bigval;

        if (!term_to_Uint(big, &bigval)) {
        error:
            $BeamOpNameArity(op, jump, 1);
            op->a[0] = Fail;
        } else {
            $BeamOpNameArity(op, i_bs_skip_bits_imm2, 3);
            op->a[0] = Fail;
            op->a[1] = Ms;
            op->a[2].type = TAG_u;
            if (!beam_load_safe_mul(bigval, Unit.val, &op->a[2].val)) {
                goto error;
            }
        }
    } else if (Size.type == TAG_x || Size.type == TAG_y) {
        $BeamOpNameArity(op, i_bs_skip_bits2, 4);
        op->a[0] = Ms;
        op->a[1] = Size;
        op->a[2] = Fail;
        op->a[3] = Unit;
    } else {
        /*
         * Invalid literal size. Can only happen if compiler
         * optimizations are selectively disabled.  For example,
         * at the time of writing, [no_copt, no_type_opt] will allow
         * skip instructions with invalid sizes to slip through.
         */
        goto error;
    }
    return op;
}

gen_increment(stp, reg, val, dst) {
    GenOp* op;
    $NewBeamOp($stp, op);
    $BeamOpNameArity(op, i_increment, 3);
    op->a[0] = $reg;
    op->a[1].type = TAG_u;
    op->a[1].val = $val;
    op->a[2] = $dst;
    return op;
}

gen.increment(Reg, Integer, Dst) {
    $gen_increment(S, Reg, Integer.val, Dst);
}

gen.increment_from_minus(Reg, Integer, Dst) {
    $gen_increment(S, Reg, -Integer.val, Dst);
}

gen.plus_from_minus(Fail, Live, Src, Integer, Dst) {
    GenOp* op;

    $NewBeamOp(S, op);
    $BeamOpNameArity(op, gen_plus, 5);
    op->a[0] = Fail;
    op->a[1] = Live;
    op->a[2] = Src;
    op->a[3].type = TAG_i;
    op->a[3].val = -Integer.val;
    op->a[4] = Dst;
    return op;
}

// Macro for generating a timeout instruction for a literal timeout value.
gen_literal_timeout(stp, fail, time, succ_instr, fail_instr) {
    GenOp* op;
    Sint timeout;

    $NewBeamOp($stp, op);
    $BeamOpNameArity(op, $succ_instr, 2);
    op->a[0].type = TAG_u;
    op->a[1] = $fail;

    if ($time.type == TAG_i && (timeout = $time.val) >= 0 &&
#if defined(ARCH_64)
        (timeout >> 32) == 0
#else
        1
#endif
        ) {
        op->a[0].val = timeout;
#if !defined(ARCH_64)
    } else if ($time.type == TAG_q) {
        Eterm big;

        big = $stp->literals[$time.val].term;
        if (is_not_big(big)) {
            goto error;
        }
        if (big_arity(big) > 1 || big_sign(big)) {
            goto error;
        } else {
            Uint u;
            (void) term_to_Uint(big, &u);
            op->a[0].val = (BeamInstr) u;
        }
#endif
    } else {
#if !defined(ARCH_64)
    error:
#endif
        $BeamOpNameArity(op, $fail_instr, 0);
    }
    return op;
}

gen.literal_timeout(Fail, Time) {
    $gen_literal_timeout(S, Fail, Time, wait_timeout_unlocked_int, i_wait_error);
}

gen.literal_timeout_locked(Fail, Time) {
    $gen_literal_timeout(S, Fail, Time, wait_timeout_locked_int, i_wait_error_locked);
}

// Tag the list of values with tuple arity tags.
gen.select_tuple_arity(Src, Fail, Size, Rest) {
    GenOp* op;
    GenOpArg *tmp;
    int arity = Size.val + 3;
    int size = Size.val / 2;
    int i, j, align = 0;

    /*
     * Verify the validity of the list.
     */

    if (Size.val % 2 != 0) {
        return NULL;
    }
    for (i = 0; i < Size.val; i += 2) {
        if (Rest[i].type != TAG_u || Rest[i+1].type != TAG_f) {
            return NULL;
        }
    }

    /*
     * Use a special-cased instruction if there are only two values.
     */
    if (size == 2) {
        $NewBeamOp(S, op);
        $BeamOpNameArity(op, i_select_tuple_arity2, 4);
        $BeamOpArity(op, arity - 1);
        op->a[0] = Src;
        op->a[1] = Fail;
        op->a[2].type = TAG_u;
        op->a[2].val  = Rest[0].val;
        op->a[3].type = TAG_u;
        op->a[3].val  = Rest[2].val;
        op->a[4] = Rest[1];
        op->a[5] = Rest[3];

        return op;
    }

    /*
     * Generate the generic instruction.
     * Assumption:
     *   Few different tuple arities to select on (fewer than 20).
     *   Use linear scan approach.
     */

    align = 1;

    arity += 2*align;
    size  += align;

    $NewBeamOp(S, op);
    $BeamOpNameArity(op, i_select_tuple_arity, 3);
    $BeamOpArity(op, arity);
    op->a[0] = Src;
    op->a[1] = Fail;
    op->a[2].type = TAG_u;
    op->a[2].val = size;

    tmp = (GenOpArg *) erts_alloc(ERTS_ALC_T_LOADER_TMP, sizeof(GenOpArg)*(arity-2*align));

    for (i = 3; i < arity - 2*align; i+=2) {
        tmp[i-3].type = TAG_v;
        tmp[i-3].val  = make_arityval(Rest[i-3].val);
        tmp[i-2]      = Rest[i-2];
    }

    /*
     * Sort the values to make them useful for a sentinel search.
     */

    beam_load_sort_select_vals(tmp, size - align);

    j = 3;
    for (i = 3; i < arity - 2*align; i += 2) {
        op->a[j]        = tmp[i-3];
        op->a[j + size] = tmp[i-2];
        j++;
    }

    erts_free(ERTS_ALC_T_LOADER_TMP, (void *) tmp);

    op->a[j].type = TAG_u;
    op->a[j].val  = ~((BeamInstr)0);
    op->a[j+size] = Fail;

    return op;
}

// Split a list consisting of both small and bignums into two
// select_val instructions.
gen.split_values(Src, TypeFail, Fail, Size, Rest) {
    GenOp* op1;
    GenOp* op2;
    GenOp* label;
    GenOp* is_integer;
    int i;

    ASSERT(Size.val >= 2 && Size.val % 2 == 0);

    $NewBeamOp(S,  is_integer);
    $BeamOpNameArity(is_integer, is_integer, 2);
    is_integer->a[0] = TypeFail;
    is_integer->a[1] = Src;

    $NewBeamOp(S,  label);
    $BeamOpNameArity(label, label, 1);
    label->a[0].type = TAG_u;
    label->a[0].val = beam_load_new_label(S);

    $NewBeamOp(S,  op1);
    $BeamOpNameArity(op1, select_val, 3);
    $BeamOpArity(op1, 3 + Size.val);
    op1->a[0] = Src;
    op1->a[1].type = TAG_f;
    op1->a[1].val = label->a[0].val;
    op1->a[2].type = TAG_u;
    op1->a[2].val = 0;

    $NewBeamOp(S,  op2);
    $BeamOpNameArity(op2, select_val, 3);
    $BeamOpArity(op2, 3 + Size.val);
    op2->a[0] = Src;
    op2->a[1] = Fail;
    op2->a[2].type = TAG_u;
    op2->a[2].val = 0;

    /*
     * Split the list.
     */

    ASSERT(Size.type == TAG_u);
    for (i = 0; i < Size.val; i += 2) {
        GenOp* op = (Rest[i].type == TAG_q) ? op2 : op1;
        int dst = 3 + op->a[2].val;

        ASSERT(Rest[i+1].type == TAG_f);
        op->a[dst] = Rest[i];
        op->a[dst+1] = Rest[i+1];
        op->arity += 2;
        op->a[2].val += 2;
    }
    ASSERT(op1->a[2].val > 0);
    ASSERT(op2->a[2].val > 0);

    /*
     * Order the instruction sequence appropriately.
     */

    if (TypeFail.val == Fail.val) {
        /*
         * select_val L1 S ... (small numbers)
         * label L1
         * is_integer Fail S
         * select_val Fail S ... (bignums)
         */
        op1->next = label;
        label->next = is_integer;
        is_integer->next = op2;
    } else {
        /*
         * is_integer TypeFail S
         * select_val L1 S ... (small numbers)
         * label L1
         * select_val Fail S ... (bignums)
         */
        is_integer->next = op1;
        op1->next = label;
        label->next = op2;
        op1 = is_integer;
    }

    return op1;
}

// Generate a jump table.
gen.jump_tab(Src, Fail, Size, Rest) {
    Sint min, max;
    Sint i;
    Sint size;
    Sint arity;
    int fixed_args;
    GenOp* op;

    ASSERT(Size.val >= 2 && Size.val % 2 == 0);

    /*
     * If there is only one choice, don't generate a jump table.
     */
    if (Size.val == 2) {
        GenOp* jump;

        $NewBeamOp(S, op);
        $BeamOpNameArity(op, is_ne_exact, 3);
        op->a[0] = Rest[1];
        op->a[1] = Src;
        op->a[2] = Rest[0];

        $NewBeamOp(S,  jump);
        $BeamOpNameArity(jump, jump, 1);
        jump->a[0] = Fail;

        op->next = jump;
        return op;
    }

    /*
     * Calculate the minimum and maximum values and size of jump table.
     */

    ASSERT(Rest[0].type == TAG_i);
    min = max = Rest[0].val;
    for (i = 2; i < Size.val; i += 2) {
        ASSERT(Rest[i].type == TAG_i && Rest[i+1].type == TAG_f);
        if (Rest[i].val < min) {
            min = Rest[i].val;
        } else if (max < Rest[i].val) {
            max = Rest[i].val;
        }
    }
    size = max - min + 1;

    /*
     * Allocate structure and fill in the fixed fields.
     */

    $NewBeamOp(S, op);
    if (min == 0) {
        $BeamOpNameArity(op, i_jump_on_val_zero, 3);
    } else {
        $BeamOpNameArity(op, i_jump_on_val, 4);
    }
    fixed_args = op->arity;
    arity = fixed_args + size;
    $BeamOpArity(op, arity);
    op->a[0] = Src;
    op->a[1] = Fail;
    op->a[2].type = TAG_u;
    op->a[2].val = size;
    op->a[3].type = TAG_u;
    op->a[3].val = min;


    /*
     * Fill in the jump table.
     */

    for (i = fixed_args; i < arity; i++) {
        op->a[i] = Fail;
    }
    for (i = 0; i < Size.val; i += 2) {
        Sint index;
        index = fixed_args+Rest[i].val-min;
        ASSERT(fixed_args <= index && index < arity);
        op->a[index] = Rest[i+1];
    }
    return op;
}


// Generate a select_val instruction.  We know that a jump table is
// not suitable, and that all values are of the same type (integer or
// atoms).
gen.select_val(Src, Fail, Size, Rest) {
    GenOp* op;
    GenOpArg *tmp;
    int arity = Size.val + 3;
    int size = Size.val / 2;
    int i, j, align = 0;

    if (size == 2) {
        /*
         * Use a special-cased instruction if there are only two values.
         */

        $NewBeamOp(S, op);
        $BeamOpNameArity(op, i_select_val2, 4);
        $BeamOpArity(op, arity - 1);
        op->a[0] = Src;
        op->a[1] = Fail;
        op->a[2] = Rest[0];
        op->a[3] = Rest[2];
        op->a[4] = Rest[1];
        op->a[5] = Rest[3];

        return op;
    }

    if (size <= 10) {
        /* Use linear search. Reserve place for a sentinel. */
        align = 1;
    }

    arity += 2*align;
    size  += align;

    $NewBeamOp(S, op);
    if (align == 0) {
        $BeamOpNameArity(op, i_select_val_bins, 3);
    } else {
        $BeamOpNameArity(op, i_select_val_lins, 3);
    }
    $BeamOpArity(op, arity);
    op->a[0] = Src;
    op->a[1] = Fail;
    op->a[2].type = TAG_u;
    op->a[2].val = size;

    tmp = (GenOpArg *) erts_alloc(ERTS_ALC_T_LOADER_TMP, sizeof(GenOpArg)*(arity-2*align));

    for (i = 3; i < arity - 2*align; i++) {
        tmp[i-3] = Rest[i-3];
    }

    /*
     * Sort the values to make them useful for a binary or sentinel search.
     */

    beam_load_sort_select_vals(tmp, size - align);

    j = 3;
    for (i = 3; i < arity - 2*align; i += 2) {
        op->a[j]      = tmp[i-3];
        op->a[j+size] = tmp[i-2];
        j++;
    }

    erts_free(ERTS_ALC_T_LOADER_TMP, (void *) tmp);

    if (align) {
        /* Add sentinel for linear search. */
        op->a[j].type = TAG_u;
        op->a[j].val  = ~((BeamInstr)0);
        op->a[j+size] = Fail;
    }

#ifdef DEBUG
    for (i = 0; i < size - 1; i++) {
        ASSERT(op->a[i+3].val <= op->a[i+4].val);
    }
#endif

    return op;
}

// Generate a select_val instruction for big numbers.
gen.select_literals(Src, Fail, Size, Rest) {
    GenOp* op;
    GenOp* jump;
    GenOp** prev_next = &op;

    int i;

    for (i = 0; i < Size.val; i += 2) {
        GenOp* op;
        ASSERT(Rest[i].type == TAG_q);

        $NewBeamOp(S, op);
        $BeamOpNameArity(op, is_ne_exact, 3);
        op->a[0] = Rest[i+1];
        op->a[1] = Src;
        op->a[2] = Rest[i];
        *prev_next = op;
        prev_next = &op->next;
    }

    $NewBeamOp(S, jump);
    $BeamOpNameArity(jump, jump, 1);
    jump->a[0] = Fail;
    *prev_next = jump;
    return op;
}



// Replace a select_val instruction with a constant controlling
// expression with a jump instruction.
gen.const_select_val(Src, Fail, Size, Rest) {
    GenOp* op;
    int i;

    ASSERT(Size.type == TAG_u);

    $NewBeamOp(S, op);
    $BeamOpNameArity(op, jump, 1);

    /*
     * Search for a literal matching the controlling expression.
     */

    switch (Src.type) {
    case TAG_q:
        {
            Eterm expr = S->literals[Src.val].term;
            for (i = 0; i < Size.val; i += 2) {
                if (Rest[i].type == TAG_q) {
                    Eterm term = S->literals[Rest[i].val].term;
                    if (eq(term, expr)) {
                        ASSERT(Rest[i+1].type == TAG_f);
                        op->a[0] = Rest[i+1];
                        return op;
                    }
                }
            }
        }
        break;
    case TAG_i:
    case TAG_a:
        for (i = 0; i < Size.val; i += 2) {
            if (Rest[i].val == Src.val && Rest[i].type == Src.type) {
                ASSERT(Rest[i+1].type == TAG_f);
                op->a[0] = Rest[i+1];
                return op;
            }
        }
        break;
    }

    /*
     * No match.  Use the failure label.
     */

    op->a[0] = Fail;
    return op;
}

gen.make_fun2(idx) {
    ErlFunEntry* fe;
    GenOp* op;
    Uint arity, num_free;

    if (idx.val >= S->num_lambdas) {
        S->lambda_error = "missing or short chunk 'FunT'";
        fe = 0;
        num_free = 0;
        arity = 0;
    } else {
        fe = S->lambdas[idx.val].fe;
        num_free = S->lambdas[idx.val].num_free;
        arity = fe->arity;
    }

    $NewBeamOp(S, op);

    /*
     * It's possible this is called before init process is started,
     * skip the optimisation in such case.
     */
    if (num_free == 0 && erts_init_process_id != ERTS_INVALID_PID) {
        Uint lit;
        Eterm* hp;
        ErlFunThing* funp;

        lit = beam_load_new_literal(S, &hp, ERL_FUN_SIZE);
        funp = (ErlFunThing *) hp;
        erts_refc_inc(&fe->refc, 2);
        funp->thing_word = HEADER_FUN;
        funp->next = NULL;
        funp->fe = fe;
        funp->num_free = 0;
        funp->creator = erts_init_process_id;
        funp->arity = arity;

        /*
         * Use a move_fun/2 instruction to load the fun to enable
         * further optimizations.
         */
        $BeamOpNameArity(op, move_fun, 2);
        op->a[0].type = TAG_q;
        op->a[0].val = lit;
        op->a[1].type = TAG_x;
        op->a[1].val = 0;
    } else {
        $BeamOpNameArity(op, i_make_fun, 2);
        op->a[0].type = TAG_u;
        op->a[0].val = (BeamInstr) fe;
        op->a[1].type = TAG_u;
        op->a[1].val = num_free;
    }

    return op;
}

gen.is_function2(Fail, Fun, Arity) {
    GenOp* op;
    int literal_arity =  Arity.type == TAG_i;
    int fun_is_reg = Fun.type == TAG_x || Fun.type == TAG_y;

    $NewBeamOp(S, op);

    if (fun_is_reg &&literal_arity) {
        /*
         * Most common case. Fun in a register and arity
         * is an integer literal.
         */
        if (Arity.val > MAX_ARG) {
            /* Arity is negative or too big. */
            $BeamOpNameArity(op, jump, 1);
            op->a[0] = Fail;
            return op;
        } else {
            $BeamOpNameArity(op, hot_is_function2, 3);
            op->a[0] = Fail;
            op->a[1] = Fun;
            op->a[2].type = TAG_u;
            op->a[2].val = Arity.val;
            return op;
        }
    } else {
        /*
         * Handle extremely uncommon cases by a slower sequence.
         */
        GenOp* move_fun;
        GenOp* move_arity;

        $NewBeamOp(S, move_fun);
        $NewBeamOp(S, move_arity);

        move_fun->next = move_arity;
        move_arity->next = op;

        $BeamOpNameArity(move_fun, move, 2);
        move_fun->a[0] = Fun;
        move_fun->a[1].type = TAG_x;
        move_fun->a[1].val = 1022;

        $BeamOpNameArity(move_arity, move, 2);
        move_arity->a[0] = Arity;
        move_arity->a[1].type = TAG_x;
        move_arity->a[1].val = 1023;

        $BeamOpNameArity(op, cold_is_function2, 3);
        op->a[0] = Fail;
        op->a[1].type = TAG_x;
        op->a[1].val = 1022;
        op->a[2].type = TAG_x;
        op->a[2].val = 1023;
        return move_fun;
    }
}

gen.tuple_append_put5(Arity, Dst, Puts, S1, S2, S3, S4, S5) {
    GenOp* op;
    int arity = Arity.val;      /* Arity of tuple, not the instruction */
    int i;

    $NewBeamOp(S, op);
    $BeamOpNameArity(op, i_put_tuple, 2);
    $BeamOpArity(op, arity+2+5);
    op->a[0] = Dst;
    op->a[1].type = TAG_u;
    op->a[1].val = arity + 5;
    for (i = 0; i < arity; i++) {
        op->a[i+2] = Puts[i];
    }
    op->a[arity+2] = S1;
    op->a[arity+3] = S2;
    op->a[arity+4] = S3;
    op->a[arity+5] = S4;
    op->a[arity+6] = S5;
    return op;
}

gen.tuple_append_put(Arity, Dst, Puts, Src) {
    GenOp* op;
    int arity = Arity.val;      /* Arity of tuple, not the instruction */
    int i;

    $NewBeamOp(S, op);
    $BeamOpNameArity(op, i_put_tuple, 2);
    $BeamOpArity(op, arity+2+1);
    op->a[0] = Dst;
    op->a[1].type = TAG_u;
    op->a[1].val = arity + 1;
    for (i = 0; i < arity; i++) {
        op->a[i+2] = Puts[i];
    }
    op->a[arity+2] = Src;
    return op;
}

// Generate an instruction for get/1.
gen.get(Src, Dst) {
    GenOp* op;
    Eterm key_term;

    $NewBeamOp(S, op);
    key_term = beam_load_get_literal(S, Src);
    if (is_value(key_term)) {
        $BeamOpNameArity(op, i_get_hash, 3);
        op->a[0] = Src;
        op->a[1].type = TAG_u;
        op->a[1].val = (BeamInstr) erts_pd_make_hx(key_term);
        op->a[2] = Dst;
    } else {
        $BeamOpNameArity(op, i_get, 2);
        op->a[0] = Src;
        op->a[1] = Dst;
    }
    return op;
}

gen.new_small_map_lit(Dst, Live, Size, Rest) {
    unsigned size = Size.val;
    Uint lit;
    unsigned i;
    GenOp* op;
    GenOpArg* dst;
    Eterm* hp;
    Eterm* tmp;
    Eterm* thp;
    Eterm keys;

    $NewBeamOp(S, op);
    $BeamOpNameArity(op, i_new_small_map_lit, 3);
    $BeamOpArity(op, 3 + size/2);

    tmp = thp = erts_alloc(ERTS_ALC_T_LOADER_TMP, (1 + size/2) * sizeof(*tmp));
    keys = make_tuple(thp);
    *thp++ = make_arityval(size/2);

    dst = op->a+3;

    for (i = 0; i < size; i += 2) {
        switch (Rest[i].type) {
        case TAG_a:
            *thp++ = Rest[i].val;
            ASSERT(is_atom(Rest[i].val));
            break;
        case TAG_i:
            *thp++ = make_small(Rest[i].val);
            break;
        case TAG_n:
            *thp++ = NIL;
            break;
        case TAG_q:
            *thp++ = S->literals[Rest[i].val].term;
            break;
        }
        *dst++ = Rest[i + 1];
    }

    if (!beam_load_find_literal(S, keys, &lit)) {
        lit = beam_load_new_literal(S, &hp, 1 + size/2);
        sys_memcpy(hp, tmp, (1 + size/2) * sizeof(*tmp));
    }
    erts_free(ERTS_ALC_T_LOADER_TMP, tmp);

    op->a[0] = Dst;
    op->a[1] = Live;
    op->a[2].type = TAG_q;
    op->a[2].val = lit;

    return op;
}

// Replace a get_map_elements instruction with a single key to an
// instruction with one element.
gen.get_map_element(Fail, Src, Size, Rest) {
    GenOp* op;
    GenOpArg Key;
    Eterm key_term;

    ASSERT(Size.type == TAG_u);

    $NewBeamOp(S, op);
    op->a[0] = Fail;
    op->a[1] = Src;
    op->a[2] = Rest[0];

    Key = Rest[0];
    key_term = beam_load_get_literal(S, Key);
    if (is_value(key_term)) {
        $BeamOpNameArity(op, i_get_map_element_hash, 5);
        op->a[3].type = TAG_u;
        op->a[3].val = (BeamInstr) hashmap_make_hash(key_term);
        op->a[4] = Rest[1];
    } else {
        $BeamOpNameArity(op, i_get_map_element, 4);
        op->a[3] = Rest[1];
    }
    return op;
}

gen.get_map_elements(Fail, Src, Size, Rest) {
    GenOp* op;
    Uint i;
    GenOpArg* dst;
    Eterm key_term;

    ASSERT(Size.type == TAG_u);

    $NewBeamOp(S, op);
    $BeamOpNameArity(op, i_get_map_elements, 3);
    $BeamOpArity(op, 3 + 3*(Size.val/2));
    op->a[0] = Fail;
    op->a[1] = Src;
    op->a[2].type = TAG_u;
    op->a[2].val = 3*(Size.val/2);

    dst = op->a+3;
    for (i = 0; i < Size.val / 2; i++) {
        dst[0] = Rest[2*i];
        dst[1] = Rest[2*i+1];
        dst[2].type = TAG_u;
        key_term = beam_load_get_literal(S, dst[0]);
        dst[2].val = (BeamInstr) hashmap_make_hash(key_term);
        dst += 3;
    }
    return op;
}

gen.has_map_fields(Fail, Src, Size, Rest) {
    GenOp* op;
    Uint i;
    Uint n;

    ASSERT(Size.type == TAG_u);
    n = Size.val;

    $NewBeamOp(S, op);
    $BeamOpNameArity(op, get_map_elements, 3);
    $BeamOpArity(op, 3 + 2*n);

    op->a[0] = Fail;
    op->a[1] = Src;
    op->a[2].type = TAG_u;
    op->a[2].val = 2*n;

    for (i = 0; i < n; i++) {
        op->a[3+2*i] = Rest[i];
        op->a[3+2*i+1].type = TAG_x;
        op->a[3+2*i+1].val = SCRATCH_X_REG; /* Ignore result */
    }
    return op;
}
